from sklearn.datasets import make_regression
import pandas as pd
import numpy as np
import tensorflow as tf
import keras
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
%matplotlib inline
from sklearn.metrics import mean_squared_error ,median_absolute_error

X ,y = make_regression(n_samples=10000, n_features=500,shuffle=True)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=44, shuffle =True)


KerasModel = keras.models.Sequential([
    keras.layers.Dense(128, activation = 'tanh'),   
    keras.layers.Dropout(0.05),
    keras.layers.Dense(64, activation = 'tanh'),   
    keras.layers.Dropout(0.05),
    keras.layers.Dense(1, activation = 'linear'),
    ])

KerasModel.compile(optimizer ='adam',loss='mse',metrics=['mse'])

history = KerasModel.fit(X, y,validation_data=(X,y),epochs=5,batch_size = 500)
###################################################

plt.subplots(figsize=(20,10))
plt.title('Loss / Mean Squared Error')
plt.plot(history.history['loss'], label='train')
plt.plot(history.history['val_loss'], label='Validation')
plt.legend()
plt.show()
###################################################
y_pred = KerasModel.predict(X_test)
print('Predicted Value  is : ' , y_pred[:10])
###################################################

MSEValue = mean_squared_error(y_test, y_pred, multioutput='uniform_average') 
print('Mean Squared Error Value is : ', MSEValue)

MdSEValue = median_absolute_error(y_test, y_pred)
print('Median Absolute Error Value is : ', MdSEValue )