#!/usr/bin/env python
# coding: utf-8

# In[1]:


import pandas as pd
import numpy as np
import tensorflow as tf
import itertools


# In[2]:


training_set_n = pd.read_csv("boston_train.csv").values
test_set_n = pd.read_csv("boston_test.csv").values
prediction_set_n = pd.read_csv("boston_predict.csv").values
np.round (training_set_n[:5])


# In[3]:


def prepare_data(df):     
        X_train = df[:, :-3]    
        y_train = df[:,-3]    
        return X_train, y_train	
X_train, y_train = prepare_data(training_set_n)
X_test, y_test = prepare_data(test_set_n)	
x_predict = prediction_set_n[:, :-2]			
print(X_train.shape, y_train.shape, x_predict.shape)			

feature_columns = [tf.feature_column.numeric_column('x',
                                                    shape=X_train.shape[1:])]			


# In[4]:


estimator = tf.estimator.LinearRegressor(    
         feature_columns=feature_columns,    
         model_dir="train1")	


# In[5]:


# Train the estimator
train_input = tf.estimator.inputs.numpy_input_fn(x={"x": X_train},    
                                                 y=y_train,
                                                 batch_size=128,
                                                 shuffle=False,
                                                 num_epochs=None)


# In[6]:


estimator.train(input_fn = train_input,steps=5000) 


# In[7]:


eval_input = tf.estimator.inputs.numpy_input_fn(    
       x={"x": X_test},    
       y=y_test, 
       shuffle=False,    
       batch_size=128,    
       num_epochs=1)


# In[8]:


estimator.evaluate(eval_input,steps=None)


# In[9]:


test_input = tf.estimator.inputs.numpy_input_fn(    
        x={"x": x_predict},    
        batch_size=128,    
        num_epochs=1,   
        shuffle=False)


# In[10]:


y = estimator.predict(test_input) 			
predictions = list(p["predictions"] for p in itertools.islice(y, 6))
print("Predictions: {}".format(str(predictions)))


# In[ ]:




